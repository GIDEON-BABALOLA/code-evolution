import type { Metadata } from "next";
// import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

// const geistSans = Geist({
//   variable: "--font-geist-sans",
//   subsets: ["latin"],
// });

// const geistMono = Geist_Mono({
//   variable: "--font-geist-mono",
//   subsets: ["latin"],
// });
import { ThemeProvider } from "@/components/theme-provider";
export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <ThemeProvider>
      <body
      >
        {children}
      </body>
            </ThemeProvider>
    </html>
  );
}
// Even though we are wrapping our application in a client component, server components down the tree stay as server components, we will explore this concept more deeply pretty soon, but this is the key to working with context providers and server components